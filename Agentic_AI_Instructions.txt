Agentic Complaint AI — Local Setup Instructions (Text Version)

===========================================================
A hybrid (rules + ML) decision engine that predicts whether a customer complaint should be refunded, denied, or escalated.
Includes:
- Complaint decision system (public UI)
- Admin dashboard with reports and audit logs
- Automatic email notifications to the customer (via Gmail SMTP)

-----------------------------------------------------------
1. REQUIREMENTS
-----------------------------------------------------------
Python 3.11 or higher
pip (latest version)
Internet connection (for sending emails)

-----------------------------------------------------------
2. SETUP STEPS
-----------------------------------------------------------

STEP 1: Extract or Clone
-------------------------
If downloaded as ZIP:
    unzip agentic_ai_app.zip
    cd agentic_ai_app

If using Git:
    git clone https://github.com/yourusername/agentic-ai.git
    cd agentic-ai


STEP 2: Create Virtual Environment
----------------------------------
macOS / Linux:
    python3 -m venv .venv
    source .venv/bin/activate

Windows (PowerShell):
    py -3 -m venv .venv
    .\.venv\Scripts\Activate.ps1

If activation fails on Windows:
    Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser


STEP 3: Install Dependencies
----------------------------
    pip install --upgrade pip
    pip install -r requirements.txt

If 'requirements.txt' is missing:
    pip install flask pandas scikit-learn gunicorn


STEP 4: (Optional) Retrain ML Model
-----------------------------------
If you have 'data/ue_training_template.csv':
    mkdir -p models
    python core/retrain.py

This generates: models/refund_classifier.pkl


STEP 5: Set Environment Variables
----------------------------------
macOS / Linux:
    export FLASK_SECRET_KEY="change-this-32-byte-secret"
    export ADMIN_USER="Admin"
    export ADMIN_PASSWORD="admin123"
    export SMTP_HOST="smtp.gmail.com"
    export SMTP_PORT="465"
    export SMTP_USER="yourgmail@gmail.com"
    export SMTP_PASS="your-16-char-app-password"
    export SMTP_FROM="yourgmail@gmail.com"
    export SMTP_FROM_NAME="Support Decisions"
    export SMTP_REPLY_TO="yourgmail@gmail.com"
    export RULES_PATH="policies/policy_rules_base.json"
    export MODEL_PATH="models/refund_classifier.pkl"
    export DB_PATH="audit.db"

Windows PowerShell:
    $env:FLASK_SECRET_KEY="change-this-32-byte-secret"
    $env:ADMIN_USER="Admin"
    $env:ADMIN_PASSWORD="admin123"
    $env:SMTP_HOST="smtp.gmail.com"
    $env:SMTP_PORT="465"
    $env:SMTP_USER="yourgmail@gmail.com"
    $env:SMTP_PASS="your-16-char-app-password"
    $env:SMTP_FROM="yourgmail@gmail.com"
    $env:SMTP_FROM_NAME="Support Decisions"
    $env:SMTP_REPLY_TO="yourgmail@gmail.com"
    $env:RULES_PATH="policies/policy_rules_base.json"
    $env:MODEL_PATH="models/refund_classifier.pkl"
    $env:DB_PATH="audit.db"

How to get Gmail App Password:
1. Enable 2-Step Verification on Gmail.
2. Visit: https://myaccount.google.com/apppasswords
3. Select 'Mail' → 'Other (AgenticAI)' → Copy the 16-character password.


STEP 6: Run the App
--------------------
    python main.py

Expected output:
    * Running on http://127.0.0.1:8080


STEP 7: Access in Browser
--------------------------
Main App: http://127.0.0.1:8080/
Admin Login: http://127.0.0.1:8080/admin/login
Dashboard: http://127.0.0.1:8080/audit

Default login:
Username: Admin
Password: admin123


STEP 8: (Optional) Use .env File
---------------------------------
Create a '.env' file in project root:

FLASK_SECRET_KEY=change-this-32-byte-secret
ADMIN_USER=Admin
ADMIN_PASSWORD=admin123
SMTP_HOST=smtp.gmail.com
SMTP_PORT=465
SMTP_USER=yourgmail@gmail.com
SMTP_PASS=your-16-char-app-password
SMTP_FROM=yourgmail@gmail.com
SMTP_FROM_NAME=Support Decisions
SMTP_REPLY_TO=yourgmail@gmail.com
RULES_PATH=policies/policy_rules_base.json
MODEL_PATH=models/refund_classifier.pkl
DB_PATH=audit.db

Load the .env file automatically before running:

macOS / Linux:
    export $(grep -v '^#' .env | xargs)
    python main.py

Windows PowerShell:
    Get-Content .env | ForEach-Object {
        if ($_ -match "^(.*?)=(.*)$") {
            [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
        }
    }
    python main.py


-----------------------------------------------------------
3. TROUBLESHOOTING
-----------------------------------------------------------
Problem: No 'final decision' on page
Cause: Missing JSON fields
Fix: Make sure API request includes all fields.

Problem: Admin dashboard empty
Cause: Different audit.db location
Fix: Run app from project root.

Problem: Emails not sent
Cause: Wrong Gmail password or not using App Password
Fix: Use Gmail App Password.

Problem: 'No ML model present'
Cause: refund_classifier.pkl missing
Fix: Run python core/retrain.py.

Problem: 'Invalid credentials'
Cause: Wrong environment variables
Fix: Check ADMIN_USER and ADMIN_PASSWORD.

-----------------------------------------------------------
4. QUICK COMMAND REFERENCE
-----------------------------------------------------------
macOS / Linux:
    python3 -m venv .venv
    source .venv/bin/activate
    pip install -r requirements.txt
    python main.py

Windows:
    py -3 -m venv .venv
    .\.venv\Scripts\Activate.ps1
    pip install -r requirements.txt
    python .\main.py

-----------------------------------------------------------
Author: Agentic Complaint AI Project
© 2025 — All Rights Reserved
